        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:48
        -:    0:Programs:25
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 789503040 returned 100% blocks executed 83%
789503040:    8:int compare(const void* a, const void* b) {
789503040:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 789503040
    #####:   10:    return 1;
789503040:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 210534144 (fallthrough)
branch  1 taken 578968896
210534144:   12:    return -1;
578968896:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 20249013 returned 100% blocks executed 95%
 20249013:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
 20249013:   44:  SelectStream(1);
call    0 returned 20249013
 20249013:   45:  PutSeed((long)randomSeed);
call    0 returned 20249013
        -:   46:  
        -:   47:  //check number of players
 20249013:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 20249013 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 20249013
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
 20249013:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
222739143:   57:  for (i = 0; i < 10; i++)
branch  0 taken 202490130
branch  1 taken 20249013 (fallthrough)
        -:   58:    {
2227391430:   59:      for (j = 0; j < 10; j++)
branch  0 taken 2024901300
branch  1 taken 202490130 (fallthrough)
        -:   60:        {
2024901300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 1822411170 (fallthrough)
branch  1 taken 202490130
branch  2 taken 0 (fallthrough)
branch  3 taken 1822411170
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
 20249013:   73:  if (numPlayers == 2)
branch  0 taken 12158689 (fallthrough)
branch  1 taken 8090324
        -:   74:    {
 12158689:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
  8090324:   77:  else if (numPlayers == 3)
branch  0 taken 4045138 (fallthrough)
branch  1 taken 4045186
        -:   78:    {
  4045138:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
  4045186:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
 20249013:   87:  if (numPlayers == 2)
branch  0 taken 12158689 (fallthrough)
branch  1 taken 8090324
        -:   88:    {
 12158689:   89:      state->supplyCount[estate] = 8;
 12158689:   90:      state->supplyCount[duchy] = 8;
 12158689:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
  8090324:   95:      state->supplyCount[estate] = 12;
  8090324:   96:      state->supplyCount[duchy] = 12;
  8090324:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
 20249013:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
 20249013:  102:  state->supplyCount[silver] = 40;
 20249013:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
425229273:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 404980260
branch  1 taken 20249013 (fallthrough)
        -:  107:    {
3341087145:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 3138597015
branch  1 taken 202490130 (fallthrough)
        -:  109:	{
3138597015:  110:	  if (kingdomCards[j] == i)
branch  0 taken 202490130 (fallthrough)
branch  1 taken 2936106885
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
202490130:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 202490130 (fallthrough)
branch  1 taken 0
branch  2 taken 20249013 (fallthrough)
branch  3 taken 182241117
        -:  114:		{
 40498026:  115:		  if (numPlayers == 2){ 
branch  0 taken 12158689 (fallthrough)
branch  1 taken 8090324
 12158689:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
  8090324:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
182241117:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
202490130:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
2936106885:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
 72882549:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 52633536
branch  1 taken 20249013 (fallthrough)
        -:  139:    {
 52633536:  140:      state->deckCount[i] = 0;
210534144:  141:      for (j = 0; j < 3; j++)
branch  0 taken 157900608
branch  1 taken 52633536 (fallthrough)
        -:  142:	{
157900608:  143:	  state->deck[i][j] = estate;
157900608:  144:	  state->deckCount[i]++;
        -:  145:	}
421068288:  146:      for (j = 3; j < 10; j++)
branch  0 taken 368434752
branch  1 taken 52633536 (fallthrough)
        -:  147:	{
368434752:  148:	  state->deck[i][j] = copper;
368434752:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
 72882549:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 52633536
branch  1 taken 20249013 (fallthrough)
        -:  155:    {
 52633536:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 52633536
branch  1 taken 0 (fallthrough)
branch  2 taken 52633536
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
 72882549:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 52633536
branch  1 taken 20249013 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
 52633536:  166:      state->handCount[i] = 0;
 52633536:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
566972364:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 546723351
branch  1 taken 20249013 (fallthrough)
        -:  177:    {
546723351:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
 20249013:  182:  state->outpostPlayed = 0;
 20249013:  183:  state->phase = 0;
 20249013:  184:  state->numActions = 1;
 20249013:  185:  state->numBuys = 1;
 20249013:  186:  state->playedCardCount = 0;
 20249013:  187:  state->whoseTurn = 0;
 20249013:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
121494078:  192:  for (it = 0; it < 5; it++){
branch  0 taken 101245065
branch  1 taken 20249013 (fallthrough)
101245065:  193:    drawCard(state->whoseTurn, state);
call    0 returned 101245065
        -:  194:  }
        -:  195:
 20249013:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 20249013
        -:  197:
 20249013:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 118532823 returned 100% blocks executed 100%
118532823:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
118532823:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
118532823:  209:  if (state->deckCount[player] < 1)
branch  0 taken 65899287 (fallthrough)
branch  1 taken 52633536
 65899287:  210:    return -1;
 52633536:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 52633536
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
631602432:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 526335360
branch  1 taken 52633536 (fallthrough)
526335360:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 526335360
526335360:  216:    newDeck[newDeckPos] = state->deck[player][card];
526335360:  217:    newDeckPos++;
1692433013:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 1166097653
branch  1 taken 526335360 (fallthrough)
1166097653:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
526335360:  221:    state->deckCount[player]--;
        -:  222:  }
578968896:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 526335360
branch  1 taken 52633536 (fallthrough)
526335360:  224:    state->deck[player][i] = newDeck[i];
526335360:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
 52633536:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 174096936 returned 100% blocks executed 85%
174096936:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
174096936:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 25375097 (fallthrough)
branch  1 taken 148721839
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
 25375097:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 25375097 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
 25375097:  538:    state->deckCount[player] = state->discardCount[player];
 25375097:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
 25375097:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 25375097
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
 25375097:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
 25375097:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
 25375097:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
 25375097:  559:    if (deckCounter == 0)
branch  0 taken 25375097 (fallthrough)
branch  1 taken 0
 25375097:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
148721839:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
148721839:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
148721839:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
148721839:  576:    state->deckCount[player]--;
148721839:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
148721839:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:
        -:  671:    // Call new adventurerCard method
    #####:  672:    adventurerCard(state, currentPlayer, cardDrawn, temphand, z, drawntreasure);
call    0 never executed
        -:  673:
        -:  674:/*      while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;
        -:  693:*/			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
call    0 never executed
        -:  710:	    }
        -:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
        -:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  740:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
        -:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
        -:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  828:	      break;
        -:  829:	    }
        -:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
        -:  836:
        -:  837:    // Call new smithyCard method
    #####:  838:    smithyCard(state, i, currentPlayer, handPos);
call    0 never executed
        -:  839:
        -:  840:/*      //+3 Cards
        -:  841:      for (i = 0; i < 3; i++)
        -:  842:	{
        -:  843:	  drawCard(currentPlayer, state);
        -:  844:	}
        -:  845:			
        -:  846:      //discard card from hand
        -:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:      return 0;
        -:  849:*/		
        -:  850:    case village:
        -:  851:      //+1 Card
    #####:  852:      drawCard(currentPlayer, state);
call    0 never executed
        -:  853:			
        -:  854:      //+2 Actions
    #####:  855:      state->numActions = state->numActions + 2;
        -:  856:			
        -:  857:      //discard played card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  887:		isGameOver(state);
call    0 never executed
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:			    
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:			    
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	    isGameOver(state);
call    0 never executed
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:	    
        -:  909:      
    #####:  910:      return 0;
        -:  911:		
        -:  912:    case great_hall:
        -:  913:    
        -:  914:    // Call new greatHallCard method
    #####:  915:    greatHallCard(state, currentPlayer, handPos);
call    0 never executed
        -:  916:
        -:  917:/*
        -:  918:      //+1 Card
        -:  919:      drawCard(currentPlayer, state);
        -:  920:			
        -:  921:      //+1 Actions
        -:  922:      state->numActions++;
        -:  923:			
        -:  924:      //discard card from hand
        -:  925:      discardCard(handPos, currentPlayer, state, 0);
        -:  926:      return 0;
        -:  927:*/		
        -:  928:    case minion:
        -:  929:
        -:  930:    // Call new minionCard method
    #####:  931:    minionCard(state, handPos, currentPlayer, choice1, choice2, i, j);
call    0 never executed
        -:  932:
        -:  933:/*
        -:  934:      //+1 action
        -:  935:      state->numActions++;
        -:  936:			
        -:  937:      //discard card from hand
        -:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:			
        -:  940:      if (choice1)		//+2 coins
        -:  941:	{
        -:  942:	  state->coins = state->coins + 2;
        -:  943:	}
        -:  944:			
        -:  945:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  946:	{
        -:  947:	  //discard hand
        -:  948:	  while(numHandCards(state) > 0)
        -:  949:	    {
        -:  950:	      discardCard(handPos, currentPlayer, state, 0);
        -:  951:	    }
        -:  952:				
        -:  953:	  //draw 4
        -:  954:	  for (i = 0; i < 4; i++)
        -:  955:	    {
        -:  956:	      drawCard(currentPlayer, state);
        -:  957:	    }
        -:  958:				
        -:  959:	  //other players discard hand and redraw if hand size > 4
        -:  960:	  for (i = 0; i < state->numPlayers; i++)
        -:  961:	    {
        -:  962:	      if (i != currentPlayer)
        -:  963:		{
        -:  964:		  if ( state->handCount[i] > 4 )
        -:  965:		    {
        -:  966:		      //discard hand
        -:  967:		      while( state->handCount[i] > 0 )
        -:  968:			{
        -:  969:			  discardCard(handPos, i, state, 0);
        -:  970:			}
        -:  971:							
        -:  972:		      //draw 4
        -:  973:		      for (j = 0; j < 4; j++)
        -:  974:			{
        -:  975:			  drawCard(i, state);
        -:  976:			}
        -:  977:		    }
        -:  978:		}
        -:  979:	    }
        -:  980:				
        -:  981:	}
        -:  982:      return 0;
        -:  983:*/	
        -:  984:    case steward:
        -:  985:    
        -:  986:    // Call new stewardCard method
    #####:  987:    stewardCard(state, choice1, choice2, choice3, currentPlayer, handPos);
call    0 never executed
        -:  988:/*
        -:  989:      if (choice1 == 1)
        -:  990:	{
        -:  991:	  //+2 cards
        -:  992:	  drawCard(currentPlayer, state);
        -:  993:	  drawCard(currentPlayer, state);
        -:  994:	}
        -:  995:      else if (choice1 == 2)
        -:  996:	{
        -:  997:	  //+2 coins
        -:  998:	  state->coins = state->coins + 2;
        -:  999:	}
        -: 1000:      else
        -: 1001:	{
        -: 1002:	  //trash 2 cards in hand
        -: 1003:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1004:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1005:	}
        -: 1006:			
        -: 1007:      //discard card from hand
        -: 1008:      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:      return 0;
        -: 1010:*/		
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
        -: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:	    
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:			    
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1039:	} 
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }    
        -: 1047:		       
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:		    
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:	    
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case ambassador:
    #####: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
    #####: 1073:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	{
    #####: 1075:	  return -1;				
        -: 1076:	}
        -: 1077:
    #####: 1078:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1086:	    {
    #####: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
    #####: 1090:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
        -: 1095:      if (DEBUG) 
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
    #####: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:			
        -: 1101:      //each other player gains a copy of revealed card
    #####: 1102:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
    #####: 1114:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}			
        -: 1125:
    #####: 1126:      return 0;
        -: 1127:		
        -: 1128:    case cutpurse:
        -: 1129:
    #####: 1130:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1136:		{
    #####: 1137:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1138:		    {
    #####: 1139:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1140:		      break;
        -: 1141:		    }
    #####: 1142:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1145:			{
        -: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}	
    #####: 1149:		      break;
        -: 1150:		    }		
        -: 1151:		}
        -: 1152:					
        -: 1153:	    }
        -: 1154:				
        -: 1155:	}				
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:		
        -: 1163:    case embargo: 
        -: 1164:      //+2 Coins
    #####: 1165:      state->coins = state->coins + 2;
        -: 1166:			
        -: 1167:      //see if selected pile is in play
    #####: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1169:	{
    #####: 1170:	  return -1;
        -: 1171:	}
        -: 1172:			
        -: 1173:      //add embargo token to selected supply pile
    #####: 1174:      state->embargoTokens[choice1]++;
        -: 1175:			
        -: 1176:      //trash card
    #####: 1177:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1178:      return 0;
        -: 1179:		
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:			
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:			
    #####: 1192:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
    #####: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1196:	  //trash card
    #####: 1197:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1198:	}
        -: 1199:			
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:				
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:			
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:	
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 8117003 returned 100% blocks executed 89%
  8117003: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:	
        -: 1251:  //if card is not trashed, added to Played pile 
  8117003: 1252:  if (trashFlag < 1)
branch  0 taken 8117003 (fallthrough)
branch  1 taken 0
        -: 1253:    {
        -: 1254:      //add card to played pile
  8117003: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
  8117003: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:	
        -: 1259:  //set played card to -1
  8117003: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:	
        -: 1262:  //remove card from player's hand
  8117003: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 602506 (fallthrough)
branch  1 taken 7514497
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
   602506: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
  7514497: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 7514497
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else 	
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
  7514497: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
  7514497: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
  7514497: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:	
  8117003: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:	
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1292:    {
    #####: 1293:      return -1;
        -: 1294:    }
        -: 1295:	
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
    #####: 1301:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
    #####: 1306:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
    #####: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //decrease number in supply pile
    #####: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:	 
    #####: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 20249013 returned 100% blocks executed 82%
 20249013: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:	
        -: 1327:  //reset coin count
 20249013: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
121494078: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 101245065
branch  1 taken 20249013 (fallthrough)
        -: 1332:    {
101245065: 1333:      if (state->hand[player][i] == copper)
branch  0 taken 80996052 (fallthrough)
branch  1 taken 20249013
        -: 1334:	{
 80996052: 1335:	  state->coins += 1;
        -: 1336:	}
 20249013: 1337:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 20249013
        -: 1338:	{
    #####: 1339:	  state->coins += 2;
        -: 1340:	}
 20249013: 1341:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 20249013
        -: 1342:	{
    #####: 1343:	  state->coins += 3;
        -: 1344:	}	
        -: 1345:    }	
        -: 1346:
        -: 1347:  //add bonus
 20249013: 1348:  state->coins += bonus;
        -: 1349:
 20249013: 1350:  return 0;
        -: 1351:}
        -: 1352:
        -: 1353:// Card 1 -- Adventurer required
function adventurerCard called 12132010 returned 100% blocks executed 100%
 12132010: 1354:int adventurerCard(struct gameState* state, int currentPlayer, int cardDrawn, int *temphand, int z, int drawntreasure){
 63433878: 1355:	while(drawntreasure<2){
branch  0 taken 39169858
branch  1 taken 12132010 (fallthrough)
 39169858: 1356:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 20262095 (fallthrough)
branch  1 taken 18907763
 20262095: 1357:	  shuffle(currentPlayer, state);
call    0 returned 20262095
        -: 1358:
        -: 1359:	  /* Bug! -- This one might be especially hard to catch. By "mistakenly" duplicating the line with the call to the
        -: 1360:	  shuffle() function, the hand is shuffled twice, resulting in a technically incorrect draw, even though it would
        -: 1361:	  appear to be normal to the player */
 20262095: 1362:	  shuffle(currentPlayer, state);
call    0 returned 20262095
        -: 1363:	}
 39169858: 1364:	drawCard(currentPlayer, state);
call    0 returned 39169858
 39169858: 1365:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
 39169858: 1366:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 28937028 (fallthrough)
branch  1 taken 10232830
branch  2 taken 23147858 (fallthrough)
branch  3 taken 5789170
branch  4 taken 0 (fallthrough)
branch  5 taken 23147858
 16022000: 1367:	  drawntreasure++;
        -: 1368:	else{
 23147858: 1369:	  temphand[z]=cardDrawn;
 23147858: 1370:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
 23147858: 1371:	  z++;
        -: 1372:	}
        -: 1373:      }
 47411878: 1374:      while(z-1>=0){
branch  0 taken 23147858
branch  1 taken 12132010 (fallthrough)
 23147858: 1375:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
 23147858: 1376:	z=z-1;
        -: 1377:      }
 12132010: 1378:      return 0;
        -: 1379:}
        -: 1380:
        -: 1381:// Card 2 -- Smithy required
function smithyCard called 5113002 returned 100% blocks executed 100%
  5113002: 1382:int smithyCard(struct gameState* state, int i, int currentPlayer, int handPos){
        -: 1383:	//+3 Cards
        -: 1384:
        -: 1385:	/* Bug! -- For loop loops 6 times instead of 3, meaning the player gets twice
        -: 1386:	the amound of cards than expected */
 35791014: 1387:      for (i = 0; i < 6; i++)
branch  0 taken 30678012
branch  1 taken 5113002 (fallthrough)
        -: 1388:	{
 30678012: 1389:	  drawCard(currentPlayer, state);
call    0 returned 30678012
        -: 1390:	}
        -: 1391:			
        -: 1392:      //discard card from hand
  5113002: 1393:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 5113002
  5113002: 1394:      return 0;
        -: 1395:}
        -: 1396:
        -: 1397:// Card 3
function minionCard called 0 returned 0% blocks executed 0%
    #####: 1398:int minionCard(struct gameState* state, int handPos, int currentPlayer, int choice1, int choice2, int i, int j){
        -: 1399:	 //+1 action
    #####: 1400:      state->numActions++;
        -: 1401:			
        -: 1402:      //discard card from hand
    #####: 1403:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1404:			
    #####: 1405:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1406:	{
    #####: 1407:	  state->coins = state->coins + 2;
        -: 1408:	}
        -: 1409:			
    #####: 1410:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1411:	{
        -: 1412:	  //discard hand
    #####: 1413:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1414:	    {
    #####: 1415:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1416:	    }
        -: 1417:				
        -: 1418:	  //draw 4
    #####: 1419:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1420:	    {
    #####: 1421:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1422:	    }
        -: 1423:				
        -: 1424:	  //other players discard hand and redraw if hand size > 4
    #####: 1425:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1426:	    {
    #####: 1427:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1428:		{
    #####: 1429:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1430:		    {
        -: 1431:		      //discard hand
    #####: 1432:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1433:			{
    #####: 1434:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1435:			}
        -: 1436:							
        -: 1437:		      //draw 4
    #####: 1438:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1439:			{
    #####: 1440:			  drawCard(i, state);
call    0 never executed
        -: 1441:
        -: 1442:			  /* Bug! -- "Mistakenly" call drawCard twice within the loop, resulting in
        -: 1443:			  drawing twice the amount of cards */
    #####: 1444:			  drawCard(i, state);
call    0 never executed
        -: 1445:			}
        -: 1446:		    }
        -: 1447:		}
        -: 1448:	    }
        -: 1449:				
        -: 1450:	}
    #####: 1451:      return 0;
        -: 1452:}
        -: 1453:
        -: 1454:// Card 4
function stewardCard called 0 returned 0% blocks executed 0%
    #####: 1455:int stewardCard(struct gameState* state, int choice1, int choice2, int choice3, int currentPlayer, int handPos){
    #####: 1456:	if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1457:	{
        -: 1458:	  //+2 cards
    #####: 1459:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1460:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1461:	}
    #####: 1462:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1463:	{
        -: 1464:	  //+2 coins
    #####: 1465:	  state->coins = state->coins + 2;
        -: 1466:	}
        -: 1467:      else
        -: 1468:	{
        -: 1469:	  //trash 2 cards in hand
    #####: 1470:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1471:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1472:	}
        -: 1473:			
        -: 1474:      //discard card from hand
    #####: 1475:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1476:      return 0;
        -: 1477:}
        -: 1478:
        -: 1479:// Card 5
function greatHallCard called 3004001 returned 100% blocks executed 100%
  3004001: 1480:int greatHallCard(struct gameState* state, int currentPlayer, int handPos){
        -: 1481:	 //+1 Card
  3004001: 1482:      drawCard(currentPlayer, state);
call    0 returned 3004001
        -: 1483:			
        -: 1484:      //+1 Actions
  3004001: 1485:      state->numActions++;
        -: 1486:
        -: 1487:      /* Bug! -- "Mistakenly" duplicate the line which increments the
        -: 1488:      number of actions, resulting in the user netting 2 extra actions
        -: 1489:      per turn instead of just 1*/
  3004001: 1490:      state->numActions++;
        -: 1491:			
        -: 1492:      //discard card from hand
  3004001: 1493:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3004001
  3004001: 1494:      return 0;
        -: 1495:}
        -: 1496:
        -: 1497://end of dominion.c
        -: 1498:
